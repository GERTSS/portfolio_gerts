import datetime
import requests
import json
import time
import re
import os

from dotenv import load_dotenv
from peewee import IntegrityError
from telebot import StateMemoryStorage, TeleBot
from telebot.custom_filters import StateFilter
from telebot.handler_backends import State, StatesGroup
from telebot.types import BotCommand, Message, ReplyKeyboardRemove
from telebot import types

from keybords import get_types_markup, get_genre_markup, get_start_markup
from config import DEFAULT_COMMANDS
from models import history_films, User, create_models

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
X_API_KEY = os.getenv("X_API_KEY")

state_storage = StateMemoryStorage()

bot = TeleBot(BOT_TOKEN, state_storage=state_storage)

type_films = ""
genre_films = ""
global_count = 0


def data_reader(message, data, i=0):
    try:
        genres = list()
        name = data["docs"][i]["name"]
        if name is None:
            return False
        filmCritics = data["docs"][i]["rating"]["kp"]
        if data["docs"][i]["description"] is None:
            description = ""
        else:
            description = data["docs"][i]["description"]
        year = data["docs"][i]["year"]
        for genre in data["docs"][i]["genres"]:
            genres.append(genre["name"])
        if data["docs"][i]["ageRating"] is None:
            ageRating = "0+"
        else:
            ageRating = data["docs"][i]["ageRating"]
        if not "poster" in data["docs"][i] or data["docs"][i]["poster"]["url"] is None:
            poster = ""
        else:
            poster = data["docs"][i]["poster"]["url"]
        current_date = datetime.datetime.now()
        with bot.retrieve_data(message.from_user.id) as data:
            data["new_film"]["title"] = name
            data["new_film"]["description"] = description
            data["new_film"]["rating"] = filmCritics
            data["new_film"]["year"] = year
            data["new_film"]["genre"] = ", ".join(map(str, genres))
            data["new_film"]["age_rating"] = ageRating
            data["new_film"]["poster"] = poster
            data["new_film"]["due_data"] = current_date.strftime("%m/%d/%y %H:%M:%S")
    except KeyError:
        return False
    return data


class UserState(StatesGroup):
    """
    –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç—É—Å—ã
    """

    new_film_title = State()
    new_film_rating = State()
    new_film_search_by_type = State()
    new_film_genres = State()
    count = State()


@bot.message_handler(commands=["start"])
def handle_start(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É start, –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è—é—â–∞—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    :param message:
    :return:
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    try:
        User.create(
            user_id=user_id,
            username=username,
            first_name=first_name,
        )
        start_murkup = get_start_markup()
        bot.reply_to(
            message,
            "–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=start_murkup,
        )
    except IntegrityError:
        start_murkup = get_start_markup()
        bot.reply_to(
            message,
            f"–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, {first_name}! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=start_murkup,
        )


@bot.message_handler(state="*", commands=["movie_search"])
def choice_name(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É movie_search, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ–±—ã –≤
    –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
    :param message:
    :return:
    """
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –§–∏–ª—å–º–∞/–°–µ—Ä–∏–∞–ª–∞")
    user_id = message.from_user.id
    bot.set_state(message.from_user.id, UserState.new_film_title)
    with bot.retrieve_data(message.from_user.id) as data:
        data["new_film"] = {"user_id": user_id}


@bot.message_handler(state=UserState.new_film_title)
def search_name(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å API —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É
    –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :return:
    """
    query = message.text.strip().lower()
    url = f"https://api.kinopoisk.dev/v1.4/movie/search?page=1&limit=1&query={query}"
    headers = {"accept": "application/json", "X-API-KEY": X_API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        bot.send_message(
            message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
        )
        bot.delete_state(message.from_user.id)
    try:
        data = json.loads(response.text)
        new_data = data_reader(message, data)
        new_film = history_films(**new_data["new_film"])
        new_film.save()
        bot.send_message(
            message.from_user.id,
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_data["new_film"]["title"]}"
            f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {new_data["new_film"]["description"]}"
            f"\n–†–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["rating"]}"
            f"\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {new_data["new_film"]["year"]}"
            f"\n–ñ–∞–Ω—Ä: {new_data["new_film"]["genre"]}"
            f"\n–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["age_rating"]}"
            f"\n{new_data["new_film"]["poster"]}",
        )
        bot.delete_state(message.from_user.id)
        start_murkup = get_start_markup()
        bot.send_message(
            message.from_user.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=start_murkup,
        )
    except IndexError:
        bot.send_message(
            message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π —Ñ–∏–ª—å–ºüò¢"
        )
        bot.delete_state(message.from_user.id)
    except Exception:
        bot.send_message(
            message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
        )
        bot.delete_state(message.from_user.id)


@bot.message_handler(state="*", commands=["search by type"])
def type_film(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É search by type, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ–±—ã –≤
    –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
    :param message:
    :return:
    """
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
    user_id = message.from_user.id
    bot.set_state(message.from_user.id, UserState.new_film_search_by_type)
    with bot.retrieve_data(message.from_user.id) as data:
        data["new_film"] = {"user_id": user_id}


@bot.message_handler(state=UserState.new_film_search_by_type)
def count_type_films(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∞—è —Ç–∏–ø —Ñ–∏–ª—å–º–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∞—è —Ü–∏–∫–ª –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
    –∏ –∑–∞–ø–∏—Å—è–º —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :return:
    """
    global global_count
    count = message.text
    if not count.isdigit():
        bot.send_message(
            message.from_user.id,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        )
        bot.register_next_step_handler(message, count_type_films)
        return
    types_murkup = get_types_markup()
    bot.send_message(
        message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å–º–∞", reply_markup=types_murkup
    )
    global_count = int(count)
    bot.register_next_step_handler(message, search_type_films)


def search_type_films(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å API —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ —Ç–∏–ø—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É
    –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :return:
    """
    global global_count
    global type_films
    try:
        if message.text == "–§–∏–ª—å–º":
            type_films = "movie"
        if message.text == "–°–µ—Ä–∏–∞–ª":
            type_films = "tv-series"
        if message.text == "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º":
            type_films = "cartoon"
        if message.text == "–ê–Ω–∏–º–µ":
            type_films = "anime"
        if type_films != "":
            url = f"https://api.kinopoisk.dev/v1.4/movie?page=1&limit=10&type={type_films}"
            headers = {"accept": "application/json", "X-API-KEY": X_API_KEY}
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                bot.send_message(
                    message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
                )
            try:
                for i in range(global_count):
                    data = json.loads(response.text)
                    new_data = data_reader(message, data, i)
                    if new_data is False:
                        continue
                    new_film = history_films(**new_data["new_film"])
                    new_film.save()
                    bot.send_message(
                        message.from_user.id,
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_data["new_film"]["title"]}"
                        f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {new_data["new_film"]["description"]}"
                        f"\n–†–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["rating"]}"
                        f"\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {new_data["new_film"]["year"]}"
                        f"\n–ñ–∞–Ω—Ä: {new_data["new_film"]["genre"]}"
                        f"\n–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["age_rating"]}"
                        f"\n{new_data["new_film"]["poster"]}",
                        )
            except IndexError:
                bot.send_message(
                    message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ñ–∏–ª—å–º—ã —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—åüò¢")
            except Exception:
                bot.send_message(
                    message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
                )
        else:
            bot.send_message(
                message.from_user.id,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                f"—Ñ–∏–ª—å–º–æ–≤ –∑–∞–Ω–æ–≤–æ –∏ —Ç–∏–ø —Ñ–∏–ª—å–º–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            )
            bot.register_next_step_handler(message, count_type_films)
    finally:
        bot.delete_state(message.from_user.id)
        start_murkup = get_start_markup()
        global_count = 0
        type_films = ""
        bot.send_message(
            message.from_user.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=start_murkup,
            )



@bot.message_handler(state="*", commands=["search by genre"])
def genre_film(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É search by genre, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ–±—ã –≤
    –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
    :param message:
    :return:
    """
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
    user_id = message.from_user.id
    bot.set_state(message.from_user.id, UserState.new_film_genres)
    with bot.retrieve_data(message.from_user.id) as data:
        data["new_film"] = {"user_id": user_id}


@bot.message_handler(state=UserState.new_film_genres)
def count_genre_films(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∞—è –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∞—è —Ü–∏–∫–ª –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
    –∏ –∑–∞–ø–∏—Å—è–º —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :return:
    """
    count = message.text
    if not count.isdigit():
        bot.send_message(
            message.from_user.id,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        )
        bot.register_next_step_handler(message, count_genre_films)
        return
    genre_murkup = get_genre_markup()
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞", reply_markup=genre_murkup)
    bot.register_next_step_handler(message, search_genre_films, int(count))


def search_genre_films(message: Message, count: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å API —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ –∂–∞–Ω—Ä—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É
    –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :param i:
    :param count:
    :return:
    """
    global genre_films
    if message.text == "–ö–æ–º–µ–¥–∏—è":
        genre_films = "–∫–æ–º–µ–¥–∏—è"
    if message.text == "–î—Ä–∞–º–∞":
        genre_films = "–¥—Ä–∞–º–∞"
    if message.text == "–£–∂–∞—Å—ã":
        genre_films = "—É–∂–∞—Å—ã"
    if message.text == "–ë–æ–µ–≤–∏–∫":
        genre_films = "–±–æ–µ–≤–∏–∫"
    if genre_films != "":
        url = f"https://api.kinopoisk.dev/v1.4/movie?page=1&limit=10&genres.name={genre_films}"
        headers = {"accept": "application/json", "X-API-KEY": X_API_KEY}
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            bot.send_message(
                message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
            )
        try:
            data = json.loads(response.text)
            for i in range(count):
                new_data = data_reader(message, data, i)
                if new_data is False:
                    continue
                new_film = history_films(**new_data["new_film"])
                new_film.save()
                bot.send_message(
                    message.from_user.id,
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_data["new_film"]["title"]}"
                    f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {new_data["new_film"]["description"]}"
                    f"\n–†–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["rating"]}"
                    f"\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {new_data["new_film"]["year"]}"
                    f"\n–ñ–∞–Ω—Ä: {new_data["new_film"]["genre"]}"
                    f"\n–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["age_rating"]}"
                    f"\n{new_data["new_film"]["poster"]}",
                )
        except IndexError:
            bot.send_message(
                message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ñ–∏–ª—å–º—ã —Ç–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—åüò¢")
            return
        except Exception:
            bot.send_message(
                message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
            )
        finally:
            start_murkup = get_start_markup()
            bot.delete_state(message.from_user.id)
            genre_films = ""
            bot.send_message(
                message.from_user.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                reply_markup=start_murkup,
            )
    else:
        bot.send_message(
            message.from_user.id,
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
            f"—Ñ–∏–ª—å–º–æ–≤ –∑–∞–Ω–æ–≤–æ –∏ —Ç–∏–ø —Ñ–∏–ª—å–º–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        )
        bot.register_next_step_handler(message, count_type_films)


@bot.message_handler(state="*", commands=["movie_by_rating"])
def choice_rating(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É movie_by_rating, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
    :param message:
    :return:
    """
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
    user_id = message.from_user.id
    bot.set_state(message.from_user.id, UserState.new_film_rating)
    with bot.retrieve_data(message.from_user.id) as data:
        data["new_film"] = {"user_id": user_id}


@bot.message_handler(state=UserState.new_film_rating)
def count_films(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∞—è —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è —Ü–∏–∫–ª –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
    –∏ –∑–∞–ø–∏—Å—è–º —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :return:
    """
    count = message.text
    if not count.isdigit():
        bot.send_message(
            message.from_user.id,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        )
        bot.register_next_step_handler(message, count_films)
        return
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –§–∏–ª—å–º–∞/–°–µ—Ä–∏–∞–ª–∞")
    bot.register_next_step_handler(message, search_rating, int(count))


def search_rating(message: Message, count: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å API —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É
    –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :param i:2
    :param count:
    :return:
    """
    try:
        rating = message.text.strip()
        pattern1 = re.compile(r"^\d+(\.\d+)?-\d+(\.\d+)?$")
        result_rating = rating
        if not pattern1.match(rating) is None:
            if rating.split("-") is list:
                nums = rating.split("-")
                if float(nums[0]) > float(nums[1]):
                    result_rating = nums[1] + "-" + nums[0]
                else:
                    result_rating = nums[0] + "-" + nums[1]
        else:
            result_rating = rating
            pattern2 = re.compile(r"^\d[.]\d+$")
            if not pattern2.match(result_rating) is None:
                rat = rating.split(".")
                check = rat[0] + rat[1]
                if not check.isdigit():
                    raise TypeError
            else:
                if not result_rating.isdigit():
                    raise TypeError
                if not 0 <= float(result_rating) <= 10:
                    raise ValueError
        url = f"https://api.kinopoisk.dev/v1.4/movie?page=1&limit=10&rating.kp={result_rating}"
        headers = {"accept": "application/json", "X-API-KEY": X_API_KEY}
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            bot.send_message(
                message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
            )
        try:
            data = json.loads(response.text)
            for i in range(count):
                new_data = data_reader(message, data, i)
                new_film = history_films(**new_data["new_film"])
                new_film.save()
                bot.send_message(
                    message.from_user.id,
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_data["new_film"]["title"]}"
                    f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {new_data["new_film"]["description"]}"
                    f"\n–†–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["rating"]}"
                    f"\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {new_data["new_film"]["year"]}"
                    f"\n–ñ–∞–Ω—Ä: {new_data["new_film"]["genre"]}"
                    f"\n–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {new_data["new_film"]["age_rating"]}"
                    f"\n{new_data["new_film"]["poster"]}",
                )
        except IndexError:
            time.sleep(0.3)
            if i == 0:
                bot.send_message(
                    message.from_user.id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ñ–∏–ª—å–º–æ–≤ —Å —Ç–∞–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                )
            else:
                bot.send_message(
                    message.from_user.id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ñ–∏–ª—å–º—ã —Å —Ç–∞–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å",
                )
            return
        except Exception as e:
            print(e)
            bot.send_message(
                message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞üò¢"
            )
            return
        finally:
            start_murkup = get_start_markup()
            bot.delete_state(message.from_user.id)
            bot.send_message(
                message.from_user.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                reply_markup=start_murkup,
            )
    except TypeError:
        bot.send_message(
            message.from_user.id,
            "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
        )
        time.sleep(0.2)
        bot.register_next_step_handler(message, count_films)
    except ValueError:
        bot.send_message(
            message.from_user.id,
            "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 10, –≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
        )
        time.sleep(0.2)
        bot.register_next_step_handler(message, count_films)


@bot.message_handler(commands=["history"])
def history(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–∞—é—â–∞—è—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥—è—â–∞—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–µ–µ
    :param message:
    :return:
    """
    user_id = message.from_user.id
    user = User.get_or_none(User.user_id == user_id)
    if user is None:
        murkup = types.InlineKeyboardMarkup()
        but = types.InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="start")
        murkup.add(but)
        bot.send_message(
            message.from_user.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n\n"
            "*/start*",
            parse_mode="Markdown",
        )
        return
    result = []
    result.extend(map(str, user.films))
    start_murkup = get_start_markup()
    if len(result) == 0:
        bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –µ—â–µ –ø—É—Å—Ç–∞.")
        bot.send_message(
            message.from_user.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=start_murkup,
        )
    else:
        for film in result:
            bot.send_message(message.from_user.id, film)
        bot.send_message(
            message.from_user.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=start_murkup,
        )


@bot.message_handler(content_types=["text"])
def func_with_resend_message(message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è —Ä–∞–±–æ—Ç—É Reply –∫–Ω–æ–ø–æ–∫
    :param message:
    :return:
    """
    print(message.text)
    if message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
        print('choice_name')
        choice_name(message)
    if message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É":
        print('choice_rating')
        choice_rating(message)
    if message.text == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤":
        print('history')
        history(message)
    if message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ç–∏–ø—É":
        print('type_film')
        type_film(message)
    if message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∂–∞–Ω—Ä—É":
        print('genre_film')
        genre_film(message)


if __name__ == "__main__":
    create_models()
    bot.add_custom_filter(StateFilter(bot))
    bot.set_my_commands([BotCommand(*cmd) for cmd in DEFAULT_COMMANDS])
    bot.polling()
